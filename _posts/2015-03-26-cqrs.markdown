---
layout: post_page
title:  "CQRS With DDD"
date:   2015-03-26
categories: architecture
---

Being a fan of DDD, I attempted to do DDD in various small projects. But everytime I tried it, I noticed a lot of boilerplate code sprouting out which converts DTOs (view objects) to domain models (entities/aggregates) and vice versa. <br/> <br/>

Most of the projects that I did DDD was in Java, which means I will end up with tons of getters/setters in my DTOs along with a lot of simple transformation code. I was able to get rid of the getters & setters using librarires like Lombok but Couldn't get away with the transformation code though. <br/><br/>

While trying to figure out how others have solved this problem, I came across the "CQRS pattern" - Command Query Responsibility Segregation. There are a lot of articles on the internet about CQRS, But when I read those articles, I couldn't instantly understand how to achieve CQRS without compromising DDD. While trying to understand CQRS, I quickly figured out that the reason I have too many DTOs and transformation logic is because I was expecting my domain model to act as the source of truth for my presentation model. But It need not have to be! <br/><br/>

CQRS is all about seperating your system into 2 components, one that handles commands (rich domain model) and other one that handles queries (presentation model). The moment I have such a seperation, I don't need complex transformation code between the 2 models. I can build my presentation model by just observing the events that occur in my domain model! <br/><br/>

The below diagram shows high level view of how your code will be structured if you use CQRS.

<img src="/img/cqrs.jpg">


<br/><br/>

As you notice, I seperated my application into 2 logical components, the one to the left (command component) is build around a neat domain model which is modeled based on the language of the business. And the component to the right (query component) is a very simple component which serves the user with the current state of the domain concept in a language that's easy to present.

<h3> Command Component </h3>

In the command component, all mutating actions are handled by the corresponding command handlers. if you are using spring/jersy, then you will have your controllers to handle the action and map it to the right command handler. <br/> <br/>

The command handler is like the facade which carefuly triggers the domain actions on the very holy domain model. The domain model first converts the domain action into an event, saves the event in itself (like an audit log) and handles the event by manipulating itself according to the business rule. The event will be  marked as new event as it's not persisted yet. <br/><br/>

When the aggregate is persisted, the repository doesn't map the domain model to corresponding Relational model. But rather, It filters the events newly added to the domain model and saves them as "facts" into the database. This leads us to have a very flat data base schema, the data base will just store events/facts that occured in the application. <br/>

The benefits of such a style of storage are:<br/>

<ul>
<li> We can build the domain model anytime by replaying the events on them (Event sourcing)
<li> We will know exactly how the aggregates arrived at a particular state
<li> We don't need DB migrations
<li> We don't need ORMS! :) - this means a lot to me, because It gives me freedom to create very good domain model without worrying if the ORM can support them.
<li> We don't loose any data
<li> Gives more freedom to refactor my domain model without worrying about storage.
<li> I can project (Event source) the events into a reporting logic to produce any kind of report easily.
</ul><br/><br/>


However, there are few problems with such an approach, what if I have a lot of events? I don't think it should be any problem even if you have few hundred event's in any aggregate. If you really have a case of thousands of events, then you can optimize it by saving the snapshop of the state (like a cache) so you don't have to apply all events but only those occured after the snapshot was taken. <br/><br/>


Before the "new" event's are stored, The application publishes them to an event bus so that all other systems/bounded contexts can subscribe to the event and interpret it accordingly. <br/>

<h3> Query Component </h3>

The Query component is another system (bounded context / micro service) or just a logical seperation in the same bounded context, which subscribes to events in the command component and builds a simple view data which is modeled in a way that could be directly presented to the user. <br/>
This is nothing but your DTOs but prebuilt based on the events instead of building it everytime we need them from the domain model.

We could also build the query component by writing map/reduce components which can run through the events in the event store (fact db) and build various views. But I prefer that the query component listents to the events in the command component and build's its own independent db so that we have loosely coupled systems. <br/>
The query component could observe the events using various messaging frameworks or even a simple RSS feed of events that occur in the command component, the query component is responsible for keeping it's view model in sync. <br/><br/>

Another important point to notice in CQRS pattern is that, we might not have strong consistency! i.e., imagine you deployed your query component as a seperate micro service which listens to changes in command component and builds the view model. Since it is asynchronous, the view model at any point in time will not be consistent with the events that's occuring in the command component. But we already know that eventual consistency is just enough for almost all domains with the added benefit of read scale. <br/><br/>

Moreover, if the commands and query are just a logical seperation within the same bounded context, then we can write synchronous code to keep both the models strongly consistent.












